{"version":3,"sources":["lib/styles/palette.js","components/auth/AuthTemplate.js","modules/loading.js","lib/createRequestSaga.js","lib/api/client.js","lib/api/auth.js","modules/auth.js","components/common/Button.js","components/auth/AuthForm.js","modules/user.js","containers/auth/LoginForm.js","pages/LoginPage.js","containers/auth/RegisterForm.js","pages/RegisterPage.js","components/common/Responsive.js","components/write/Editor.js","lib/api/posts.js","modules/write.js","containers/write/EditorContainer.js","components/write/TagBox.js","containers/write/TagBoxContainer.js","components/write/WriteActionButtons.js","containers/write/WriteActionButtonsContainer.js","components/common/Header.js","containers/common/HeaderContainer.js","pages/WritePage.js","modules/post.js","components/common/SubInfo.js","components/common/Tags.js","components/post/PostViewer.js","components/common/AskModal.js","components/post/AskRemoveModal.js","components/post/PostActionButtons.js","containers/post/PostViewerContainer.js","pages/PostPage.js","components/posts/PostList.js","modules/posts.js","containers/posts/PostListContainer.js","components/posts/Pagination.js","containers/posts/PaginationContainer.js","pages/PostListPage.js","App.js","serviceWorker.js","modules/index.js","index.js"],"names":["palette","gray","cyan","AuthTemplateBlock","styled","div","WhiteBox","AuthTemplate","children","className","to","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestActionTypes","type","createRequestSaga","request","SUCCESS","FAILURE","put","call","response","data","meta","error","client","axios","create","serverUrl","logout","post","authSaga","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","key","value","initializeForm","register","username","password","login","registerSaga","loginSaga","takeLatest","initialState","passwordConfirm","auth","authError","produce","draft","buttonStyle","css","props","fullWidth","StyledButton","button","StyledLink","Link","Button","textMap","AuthFormBlock","StyledInput","input","Footer","ButtonWithMarginTop","ErrorMessage","AuthForm","onChange","onSubmit","text","autoComplete","name","placeholder","logoutSaga","userSaga","CHECK","CHECK_SUCCESS","CHECK_FAILURE","tempSetUser","user","check","checkSaga","get","checkFailureSaga","localStorage","removeItem","e","console","log","authAPI","checkError","withRouter","history","useState","setError","dispatch","useDispatch","useSelector","useEffect","push","setItem","JSON","stringify","target","preventDefault","LoginPage","status","includes","RegisterPage","ResponsiveBlock","Responsive","rest","EditorBlock","TitleInput","QuillWrapper","Editor","title","body","onChangeField","quillElement","useRef","quillInstance","current","Quill","theme","modules","toolbar","header","list","quill","on","delta","oldDelta","source","root","innerHTML","mounted","ref","writeSaga","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","initialize","writePost","tags","setOriginalPost","updatePost","id","writePostSaga","updatePostSaga","patch","postError","originalPostId","write","_id","EditorContainer","useCallback","TagBoxBlock","TagForm","Tag","TagListBlock","TagItem","React","memo","tag","onRemove","onClick","TagList","map","TagBox","onChangeTags","setInput","localTags","setLocalTags","insetTag","nextTags","filter","t","trim","TagBoxContainer","WriteActionButtonsBlock","WriteActionButtons","onCancel","onPublish","isEdit","goBack","HeaderBlock","Wrapper","Spacer","UserInfo","Header","onLogout","HeaderContainer","WritePage","postSaga","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","readPost","unloadPost","readPostSaga","SubInfoBlock","hasMarginTop","SubInfo","publishedDate","Date","toLocaleDateString","TagsBlock","Tags","PostViewerBlock","PostHead","PostContent","PostViewer","actionButtons","dangerouslySetInnerHTML","__html","Fullscreen","AskModalBlock","AskModal","visible","description","confirmText","cancelText","onConfirm","AskRemoveModal","PostActionButtonsBlock","ActionButton","PostActionButtons","onEdit","modal","setModal","match","postId","params","a","delete","ownPost","PostPage","PostListBlock","WritePostButtonWrapper","PostItemBlock","PostItem","PostList","posts","showWriteButton","postsSaga","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","listPosts","page","listPostsSaga","queryString","qs","lastPage","parseInt","headers","location","parse","search","ignoreQueryPrefix","PaginationBlock","PageNumber","buildLink","query","Pagination","disabled","undefined","PostListPage","App","component","path","exact","Boolean","window","hostname","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","getItem","loadUser","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1f5caed1.chunk.js","sourcesContent":["// source: https://yeun.github.io/open-color/\r\n\r\nconst palette = {\r\n    gray: [\r\n        '#f8f9fa',\r\n        '#f1f3f5',\r\n        '#e9ecef',\r\n        '#dee2e6',\r\n        '#ced4da',\r\n        '#adb5bd',\r\n        '#868e96',\r\n        '#495057',\r\n        '#343a40',\r\n        '#212529',\r\n    ],\r\n    cyan: [\r\n        '#e3fafc',\r\n        '#c5f6fa',\r\n        '#99e9f2',\r\n        '#66d9e8',\r\n        '#3bc9db',\r\n        '#22b8cf',\r\n        '#15aabf',\r\n        '#1098ad',\r\n        '#0c8599',\r\n        '#0b7285',\r\n    ],\r\n};\r\n\r\nexport default palette;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport {Link} from 'react-router-dom';\r\n\r\n// 회원가입, 로그인 페이지 레이아웃\r\n\r\nconst AuthTemplateBlock = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n  background: ${palette.gray[2]};\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst WhiteBox = styled.div`\r\n  .logo-area {\r\n    display: block;\r\n    padding-bottom: 2rem;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    letter-spacing: 2px;\r\n  }\r\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.025);\r\n  padding: 2rem;\r\n  width: 360px;\r\n  background: #fff;\r\n  border-radius: 2px;\r\n`;\r\n\r\nconst AuthTemplate = ({children}) => {\r\n    return (\r\n        <AuthTemplateBlock>\r\n            <WhiteBox>\r\n                <div className=\"logo-area\">\r\n                    <Link to=\"/\">U-Zo</Link>\r\n                </div>\r\n                {children}\r\n            </WhiteBox>\r\n        </AuthTemplateBlock>\r\n    );\r\n};\r\n\r\nexport default AuthTemplate;","import {createAction, handleActions} from 'redux-actions';\r\n\r\nconst START_LOADING = 'loading/START_LOADING';\r\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\r\n\r\n// 요청을 위한 액션 타입을 payload로 설정\r\n\r\nexport const startLoading = createAction(\r\n    START_LOADING,\r\n    requestType => requestType\r\n);\r\n\r\nexport const finishLoading = createAction(\r\n    FINISH_LOADING,\r\n    requestType => requestType\r\n);\r\n\r\nconst initialState = {};\r\n\r\nconst loading = handleActions(\r\n    {\r\n        [START_LOADING]: (state, action) => ({\r\n            ...state,\r\n            [action.payload]: true\r\n        }),\r\n        [FINISH_LOADING]: (state, action) => ({\r\n            ...state,\r\n            [action.payload]: false\r\n        })\r\n    },\r\n    initialState\r\n);\r\n\r\nexport default loading;","import {call, put} from 'redux-saga/effects';\r\nimport {startLoading, finishLoading} from '../modules/loading';\r\n\r\nexport const createRequestActionTypes = type => {\r\n    const SUCCESS = `${type}_SUCCESS`;\r\n    const FAILURE = `${type}_FAILURE`;\r\n    return [type, SUCCESS, FAILURE];\r\n};\r\n\r\nexport default function createRequestSaga(type, request) {\r\n    const SUCCESS = `${type}_SUCCESS`;\r\n    const FAILURE = `${type}_FAILURE`;\r\n\r\n    return function*(action) {\r\n        yield put(startLoading(type)); // 로딩 시작\r\n        try {\r\n            const response = yield call(request, action.payload);\r\n            yield put({\r\n                type: SUCCESS,\r\n                payload: response.data,\r\n                meta: response\r\n            });\r\n        } catch (e) {\r\n            yield put({\r\n                type: FAILURE,\r\n                payload: e,\r\n                error: true\r\n            });\r\n        }\r\n        yield put(finishLoading(type)); // 로딩 끝\r\n    }\r\n};","import axios from 'axios';\r\n\r\nconst client = axios.create();\r\n\r\nexport default client;","import client from './client';\r\n\r\nconst serverUrl = 'https://u-zo-server.herokuapp.com';\r\n\r\n// 로그인\r\nexport const login = ({ username, password }) =>\r\n  client.post(`${serverUrl}/api/auth/login`, { username, password });\r\n\r\n// 회원가입\r\nexport const register = ({ username, password }) =>\r\n  client.post(`${serverUrl}/api/auth/register`, { username, password });\r\n\r\n// 로그인 상태 확인\r\nexport const check = () => client.get(`${serverUrl}/api/auth/check`);\r\n\r\nexport const logout = () => client.post(`${serverUrl}/api/auth/logout`);\r\n","import {createAction, handleActions} from 'redux-actions';\r\nimport produce from 'immer';\r\nimport {takeLatest} from 'redux-saga/effects';\r\nimport createRequestSaga, {createRequestActionTypes} from '../lib/createRequestSaga';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\r\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\r\n\r\n/*\r\nconst REGISTER = 'auth/REGISTER';\r\nconst REGISTER_SUCCESS = 'auth/REGISTER_SUCCESS';\r\nconst REGISTER_FAILURE = 'auth/REGISTER_FAILURE';\r\n\r\nconst LOGIN = 'auth/LOGIN';\r\nconst LOGIN_SUCCESS = 'auth/LOGIN_SUCCESS';\r\nconst LOGIN_FAILURE = 'auth/LOGIN_FAILURE';\r\n*/\r\n\r\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes(\r\n    'auth/REGISTER'\r\n);\r\n\r\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes(\r\n    'auth/LOGIN'\r\n);\r\n\r\nexport const changeField = createAction(\r\n    CHANGE_FIELD,\r\n    ({form, key, value}) => ({\r\n        form, // register, login\r\n        key, // username, password, passwordConfirm\r\n        value, // 실제 바꾸려는 값\r\n    })\r\n);\r\n\r\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form);\r\n// register, login\r\nexport const register = createAction(REGISTER, ({username, password}) => ({\r\n    username,\r\n    password\r\n}));\r\nexport const login = createAction(LOGIN, ({username, password}) => ({\r\n    username,\r\n    password\r\n}));\r\n\r\n// 사가 생성\r\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\r\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\r\nexport function* authSaga() {\r\n    yield takeLatest(REGISTER, registerSaga);\r\n    yield takeLatest(LOGIN, loginSaga);\r\n}\r\n\r\nconst initialState = {\r\n    register: {\r\n        username: '',\r\n        password: '',\r\n        passwordConfirm: ''\r\n    },\r\n    login: {\r\n        username: '',\r\n        password: ''\r\n    },\r\n    auth: null,\r\n    authError: null\r\n};\r\n\r\nconst auth = handleActions(\r\n    {\r\n        [CHANGE_FIELD]: (state, {payload: {form, key, value}}) =>\r\n            produce(state, draft => {\r\n                draft[form][key] = value; // 예: state.register.username 을 바꾼다\r\n            }),\r\n        [INITIALIZE_FORM]: (state, {payload: form}) => ({\r\n            ...state,\r\n            [form]: initialState[form]\r\n        }),\r\n        // 회원가입 성공\r\n        [REGISTER_SUCCESS]: (state, {payload: auth}) => ({\r\n            ...state,\r\n            authError: null,\r\n            auth\r\n        }),\r\n        // 회원가입 실패\r\n        [REGISTER_FAILURE]: (state, {payload: error}) => ({\r\n            ...state,\r\n            authError: error\r\n        }),\r\n        // 로그인 성공\r\n        [LOGIN_SUCCESS]: (state, {payload: auth}) => ({\r\n            ...state,\r\n            authError: null,\r\n            auth\r\n        }),\r\n        // 로그인 실패\r\n        [LOGIN_FAILURE]: (state, {payload: error}) => ({\r\n            ...state,\r\n            authError: error\r\n        })\r\n    },\r\n    initialState\r\n);\r\n\r\nexport default auth;","import React from 'react';\r\nimport styled, {css} from 'styled-components';\r\nimport {Link} from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst buttonStyle = css`\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  padding: 0.25rem 1rem;\r\n  color: #fff;\r\n  outline: none;\r\n  cursor: pointer;\r\n  \r\n  background: ${palette.gray[8]};\r\n  &:hover {\r\n    background: ${palette.gray[6]};\r\n  }\r\n  \r\n  ${props =>\r\n    props.fullWidth &&\r\n    css`\r\n      padding-top: 0.75rem;\r\n      padding-bottom: 0.75rem;\r\n      width: 100%;\r\n      font-size: 1.125rem;\r\n    `}\r\n  \r\n  ${props =>\r\n    props.cyan &&\r\n    css`\r\n      background: ${palette.cyan[5]};\r\n      &:hover {\r\n        background: ${palette.cyan[4]};\r\n      }\r\n    `}\r\n  \r\n  &:disabled {\r\n    background: ${palette.gray[3]};\r\n    color: ${palette.gray[5]};\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n  ${buttonStyle}\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  ${buttonStyle}\r\n`;\r\n\r\nconst Button = props => {\r\n  return props.to ? (\r\n      <StyledLink {...props} cyan={props.cyan ? 1 : 0}/>\r\n  ) : (\r\n      <StyledButton {...props}/>\r\n  );\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {Link} from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\nimport Button from '../common/Button'\r\n\r\nconst textMap = {\r\n    login: '로그인',\r\n    register: '회원가입'\r\n};\r\n\r\nconst AuthFormBlock = styled.div`\r\n  h3 {\r\n    margin: 0;\r\n    color: ${palette.gray[8]};\r\n    margin-bottom: 1rem; \r\n  }\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  font-size: 1rem;\r\n  border: none;\r\n  border-bottom: 1px solid ${palette.gray[5]};\r\n  padding-bottom: 0.5rem;\r\n  outline: none;\r\n  width: 100%;\r\n  &:focus {\r\n    color: $oc-teal-7;\r\n    border-bottom: 1px solid ${palette.gray[7]};\r\n  }\r\n  & + & {\r\n    margin-top: 1rem;\r\n  }\r\n`;\r\n\r\nconst Footer = styled.div`\r\n  margin-top: 2rem;\r\n  text-align: right;\r\n  a {\r\n    color: ${palette.gray[6]};\r\n    text-decoration: underline;\r\n    &:hover {\r\n      color: ${palette.gray[9]};\r\n    }\r\n  }\r\n`;\r\n\r\nconst ButtonWithMarginTop = styled(Button)`\r\n  margin-top: 1rem;\r\n`;\r\n\r\n// 에러 출력\r\nconst ErrorMessage = styled.div`\r\n  color: red;\r\n  text-align: center;\r\n  font-size: 0.875rem;\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst AuthForm = ({type, form, onChange, onSubmit, error}) => {\r\n    const text = textMap[type];\r\n    return (\r\n        <AuthFormBlock>\r\n            <h3>{text}</h3>\r\n            <form onSubmit={onSubmit}>\r\n                <StyledInput\r\n                    autoComplete=\"username\"\r\n                    name=\"username\"\r\n                    placeholder=\"아이디\"\r\n                    onChange={onChange}\r\n                    value={form.username}\r\n                />\r\n                <StyledInput\r\n                    autoComplete=\"new-password\"\r\n                    name=\"password\"\r\n                    placeholder=\"비밀번호\"\r\n                    type=\"password\"\r\n                    onChange={onChange}\r\n                    value={form.password}\r\n                />\r\n                {type === 'register' && (\r\n                    <StyledInput\r\n                        autoComplete=\"new-password\"\r\n                        name=\"passwordConfirm\"\r\n                        placeholder=\"비밀번호 확인\"\r\n                        type=\"password\"\r\n                        onChange={onChange}\r\n                        value={form.passwordConfirm}\r\n                    />\r\n                )}\r\n                {error && <ErrorMessage>{error}</ErrorMessage>}\r\n                <ButtonWithMarginTop cyan fullWidth>\r\n                    {text}\r\n                </ButtonWithMarginTop>\r\n            </form>\r\n            <Footer>\r\n                {type === 'login' ? (\r\n                    <Link to=\"/register\">회원가입</Link>\r\n                ) : (\r\n                    <Link to=\"/login\">로그인</Link>\r\n                )}\r\n            </Footer>\r\n        </AuthFormBlock>\r\n    );\r\n};\r\n\r\nexport default AuthForm;","import {createAction, handleActions} from 'redux-actions';\r\nimport {takeLatest, call} from 'redux-saga/effects';\r\nimport * as authAPI from '../lib/api/auth';\r\nimport createRequestSaga, {createRequestActionTypes} from '../lib/createRequestSaga';\r\n\r\nconst TEMP_SET_USER = 'user/TEMP_SET_USER'; // 새로고침 이후 임시 로그인 처리\r\n// 회원 정보 확인\r\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes(\r\n    'user/CHECK'\r\n);\r\nconst LOGOUT = 'user/LOGOUT';\r\n\r\nexport const tempSetUser = createAction(TEMP_SET_USER, user => user);\r\nexport const check = createAction(CHECK);\r\nexport const logout = createAction(LOGOUT);\r\n\r\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\r\n\r\nfunction checkFailureSaga() {\r\n    try {\r\n        localStorage.removeItem('user'); // localStorage에서 user 제거\r\n    } catch (e) {\r\n        console.log('localStorage is not working');\r\n    }\r\n}\r\n\r\nfunction* logoutSaga() {\r\n    try {\r\n        yield call(authAPI.logout); // logout 호출\r\n        localStorage.removeItem('user'); // localStorage에서 user 제거\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nexport function* userSaga() {\r\n    yield takeLatest(CHECK, checkSaga);\r\n    yield takeLatest(CHECK_FAILURE, checkFailureSaga);\r\n    yield takeLatest(LOGOUT, logoutSaga);\r\n}\r\n\r\nconst initialState = {\r\n    user: null,\r\n    checkError: null\r\n};\r\n\r\nexport default handleActions(\r\n    {\r\n        [TEMP_SET_USER]: (state, {payload: user}) => ({\r\n            ...state,\r\n            user\r\n        }),\r\n        [CHECK_SUCCESS]: (state, {payload: user}) => ({\r\n            ...state,\r\n            user,\r\n            checkError: null\r\n        }),\r\n        [CHECK_FAILURE]: (state, {payload: error}) => ({\r\n            ...state,\r\n            user: null,\r\n            checkError: error\r\n        }),\r\n        [LOGOUT]: state => ({\r\n            ...state,\r\n            user: null\r\n        })\r\n    },\r\n    initialState\r\n);","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {changeField, initializeForm, login} from '../../modules/auth';\r\nimport AuthForm from '../../components/auth/AuthForm';\r\nimport {check} from '../../modules/user';\r\n\r\nconst LoginForm = ({history}) => {\r\n    const [error, setError] = useState(null);\r\n    const dispatch = useDispatch();\r\n    const {form, auth, authError, user} = useSelector(({auth, user}) => ({\r\n        form: auth.login,\r\n        auth: auth.auth,\r\n        authError: auth.authError,\r\n        user: user.user\r\n    }));\r\n    // 인풋 변경 이벤트 핸들러\r\n    const onChange = e => {\r\n        const {value, name} = e.target;\r\n        dispatch(\r\n            changeField({\r\n                form: 'login',\r\n                key: name,\r\n                value\r\n            })\r\n        );\r\n    };\r\n\r\n    // 폼 등록 이벤트 핸들러\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        const {username, password} = form;\r\n        dispatch(login({username, password}));\r\n    };\r\n\r\n    // 컴포넌트가 처음 렌더링될 때 form 초기화\r\n    useEffect(() => {\r\n        dispatch(initializeForm('login'));\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (authError) {\r\n            console.log('오류 발생');\r\n            console.log(authError);\r\n            setError('로그인 실패');\r\n            return;\r\n        }\r\n        if (auth) {\r\n            console.log('로그인 성공');\r\n            dispatch(check());\r\n        }\r\n    }, [auth, authError, dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            history.push('/');\r\n            try {\r\n                localStorage.setItem('user', JSON.stringify(user));\r\n            } catch (e) {\r\n                console.log('localStorage is not working');\r\n            }\r\n        }\r\n    }, [history, user]);\r\n\r\n    return (\r\n        <AuthForm\r\n            type=\"login\"\r\n            form={form}\r\n            onChange={onChange}\r\n            onSubmit={onSubmit}\r\n            error={error}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(LoginForm);","import React from 'react';\r\nimport AuthTemplate from '../components/auth/AuthTemplate';\r\nimport LoginForm from '../containers/auth/LoginForm';\r\n\r\nconst LoginPage = () => {\r\n    return (\r\n        <AuthTemplate>\r\n            <LoginForm/>\r\n        </AuthTemplate>\r\n    );\r\n};\r\n\r\nexport default LoginPage;","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {changeField, initializeForm, register} from '../../modules/auth';\r\nimport AuthForm from '../../components/auth/AuthForm';\r\nimport {check} from '../../modules/user';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst RegisterForm = ({history}) => {\r\n    const [error, setError] = useState(null);\r\n    const dispatch = useDispatch();\r\n    const {form, auth, authError, user} = useSelector(({auth, user}) => ({\r\n        form: auth.register,\r\n        auth: auth.auth,\r\n        authError: auth.authError,\r\n        user: user.user\r\n    }));\r\n    // 인풋 변경 이벤트 핸들러\r\n    const onChange = e => {\r\n        const {value, name} = e.target;\r\n        dispatch(\r\n            changeField({\r\n                form: 'register',\r\n                key: name,\r\n                value\r\n            })\r\n        );\r\n    };\r\n\r\n    // 폼 등록 이벤트 핸들러\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        const {username, password, passwordConfirm} = form;\r\n        // 하나라도 비어 있을 경우\r\n        if ([username, password, passwordConfirm].includes('')) {\r\n            setError('빈 칸을 모두 입력하세요.');\r\n            return;\r\n        }\r\n        // 비밀번호 불일치\r\n        if (password !== passwordConfirm) {\r\n            setError('비밀번호가 일치하지 않습니다.');\r\n            dispatch(changeField({form: 'register', key: 'password', value: ''}));\r\n            dispatch(changeField({form: 'register', key: 'passwordConfirm', value: ''}));\r\n            return;\r\n        }\r\n        dispatch(register({username, password}));\r\n    };\r\n\r\n    // 컴포넌트가 처음 렌더링될 때 form 초기화\r\n    useEffect(() => {\r\n        dispatch(initializeForm('register'));\r\n    }, [dispatch]);\r\n\r\n    // 회원가입 성공, 실패 처리\r\n    useEffect(() => {\r\n        if (authError) {\r\n            // 계정이 존재할 때\r\n            if (authError.response.status === 409) {\r\n                setError('이미 존재하는 계정입니다.');\r\n                return;\r\n            }\r\n            // 기타 이유\r\n            setError('회원가입 실패');\r\n            return;\r\n        }\r\n\r\n        if (auth) {\r\n            console.log('회원가입 성공');\r\n            console.log(auth);\r\n            dispatch(check());\r\n        }\r\n    }, [auth, authError, dispatch]);\r\n\r\n    // user 값이 잘 설정되었는지 확인\r\n    useEffect(() => {\r\n        if (user) {\r\n            history.push('/'); // 홈 화면으로 이동\r\n            try {\r\n                localStorage.setItem('user', JSON.stringify(user));\r\n            } catch (e) {\r\n                console.log('localStorage is not working');\r\n            }\r\n        }\r\n    }, [history, user]);\r\n\r\n    return (\r\n        <AuthForm\r\n            type=\"register\"\r\n            form={form}\r\n            onChange={onChange}\r\n            onSubmit={onSubmit}\r\n            error={error}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(RegisterForm);","import React from 'react';\r\nimport AuthTemplate from '../components/auth/AuthTemplate';\r\nimport RegisterForm from '../containers/auth/RegisterForm';\r\n\r\nconst RegisterPage = () => {\r\n    return (\r\n        <AuthTemplate>\r\n            <RegisterForm type=\"register\"/>\r\n        </AuthTemplate>\r\n    );\r\n};\r\n\r\nexport default RegisterPage;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ResponsiveBlock = styled.div`\r\n  padding-left: 1rem;\r\n  padding-right: 1rem;\r\n  width: 1024px;\r\n  margin: 0 auto;\r\n  \r\n  @media (max-width: 1024px) {\r\n    width: 768px;\r\n  }\r\n  \r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst Responsive = ({children, ...rest}) => {\r\n    // style, className, onClick, onMouseMove 등의 props 를 사용할 수 있도록\r\n    // ...rest 를 이용하여 ResponsiveBlock 에게 전달\r\n    return <ResponsiveBlock {...rest}>{children}</ResponsiveBlock>\r\n};\r\n\r\nexport default Responsive;","import React, {useRef, useEffect} from 'react';\r\nimport Quill from 'quill';\r\nimport 'quill/dist/quill.bubble.css';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Responsive from '../common/Responsive';\r\n\r\nconst EditorBlock = styled(Responsive)`\r\n  // 페이지 위 아래 여백\r\n  padding-top: 5rem;\r\n  padding-bottom: 5rem;\r\n`;\r\n\r\nconst TitleInput = styled.input`\r\n  font-size: 3rem;\r\n  outline: none;\r\n  padding-bottom: 0.5rem;\r\n  border: none;\r\n  border-bottom: 1px solid ${palette.gray[4]};\r\n  margin-bottom: 2rem;\r\n  width: 100%;\r\n`;\r\n\r\nconst QuillWrapper = styled.div`\r\n  // 최소 크기 지정 및 padding 제거\r\n  .ql-editor {\r\n    padding: 0;\r\n    min-height: 320px;\r\n    font-size: 1.125rem;\r\n    line-height: 1.5;\r\n  }\r\n  .ql-editor.ql-blank::before {\r\n    left: 0px;\r\n  }\r\n`;\r\n\r\nconst Editor = ({title, body, onChangeField}) => {\r\n    const quillElement = useRef(null); // Quill을 적용할 DivElement 설정\r\n    const quillInstance = useRef(null); // Quill 인스턴스 설정\r\n\r\n    useEffect(() => {\r\n        quillInstance.current = new Quill(quillElement.current, {\r\n            theme: 'bubble',\r\n            placeholder: '내용을 작성하세요...',\r\n            modules: {\r\n                // https://quilljs.com/docs/modules/toolbar 옵션 참고\r\n                toolbar: [\r\n                    [{header: '1'}, {header: '2'}],\r\n                    ['bold', 'italic', 'underline', 'strike'],\r\n                    [{list: 'ordered'}, {list: 'bullet'}],\r\n                    ['blockquote', 'code-block', 'link', 'image']\r\n                ]\r\n            }\r\n        });\r\n\r\n        // quill에 text-change 이벤트 핸들러 등록\r\n        const quill = quillInstance.current;\r\n        quill.on('text-change', (delta, oldDelta, source) => {\r\n            if (source === 'user') {\r\n                onChangeField({key: 'body', value: quill.root.innerHTML});\r\n            }\r\n        });\r\n    }, [onChangeField]);\r\n\r\n    const mounted = useRef(false);\r\n    useEffect(() => {\r\n        if (mounted.current) return;\r\n        mounted.current = true;\r\n        quillInstance.current.root.innerHTML = body;\r\n    }, [body]);\r\n\r\n    const onChangeTitle = e => {\r\n        onChangeField({key: 'title', value: e.target.value});\r\n    };\r\n\r\n    return (\r\n        <EditorBlock>\r\n            <TitleInput\r\n                placeholder=\"제목을 입력하세요.\"\r\n                onChange={onChangeTitle}\r\n                value={title}\r\n            />\r\n            <QuillWrapper>\r\n                <div ref={quillElement}/>\r\n            </QuillWrapper>\r\n        </EditorBlock>\r\n    );\r\n};\r\n\r\nexport default Editor;","import qs from 'qs';\r\nimport client from './client';\r\n\r\nconst serverUrl = 'https://u-zo-server.herokuapp.com';\r\n\r\nexport const writePost = ({ title, body, tags }) =>\r\n  client.post(`${serverUrl}/api/posts`, { title, body, tags });\r\n\r\nexport const readPost = (id) => client.get(`${serverUrl}/api/posts/${id}`);\r\n\r\nexport const listPosts = ({ page, username, tag }) => {\r\n  const queryString = qs.stringify({\r\n    page,\r\n    username,\r\n    tag,\r\n  });\r\n\r\n  return client.get(`${serverUrl}/api/posts?${queryString}`);\r\n};\r\n\r\nexport const updatePost = ({ id, title, body, tags }) => {\r\n  client.patch(`${serverUrl}/api/posts/${id}`, {\r\n    title,\r\n    body,\r\n    tags,\r\n  });\r\n};\r\n\r\nexport const removePost = (id) => client.delete(`${serverUrl}/api/posts/${id}`);\r\n","import {createAction, handleActions} from 'redux-actions';\r\nimport createRequestSaga, {createRequestActionTypes} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport {takeLatest} from 'redux-saga/effects';\r\n\r\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\r\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\r\nconst [\r\n    WRITE_POST,\r\n    WRITE_POST_SUCCESS,\r\n    WRITE_POST_FAILURE\r\n] = createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\r\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST'; // 수정할 포스트 내용 불러오기\r\nconst [\r\n    UPDATE_POST,\r\n    UPDATE_POST_SUCCESS,\r\n    UPDATE_POST_FAILURE\r\n] = createRequestActionTypes('write/UPDATE_POST'); // 포스트 수정\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({key, value}) => ({\r\n    key,\r\n    value\r\n}));\r\n\r\nexport const writePost = createAction(WRITE_POST, ({title, body, tags}) => ({\r\n    title,\r\n    body,\r\n    tags\r\n}));\r\n\r\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post);\r\nexport const updatePost = createAction(\r\n    UPDATE_POST,\r\n    ({id, title, body, tags}) => ({\r\n        id,\r\n        title,\r\n        body,\r\n        tags\r\n    })\r\n);\r\n\r\n// 사가 생성\r\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\r\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\r\n\r\nexport function* writeSaga() {\r\n    yield takeLatest(WRITE_POST, writePostSaga);\r\n    yield takeLatest(UPDATE_POST, updatePostSaga);\r\n}\r\n\r\nconst initialState = {\r\n    title: '',\r\n    body: '',\r\n    tags: [],\r\n    post: null,\r\n    postError: null,\r\n    originalPostId: null\r\n};\r\n\r\nconst write = handleActions(\r\n    {\r\n        [INITIALIZE]: state => initialState, // initialState를 넣으면 초기 상태로 바뀜\r\n        [CHANGE_FIELD]: (state, {payload: {key, value}}) => ({\r\n            ...state,\r\n            [key]: value // 특정 key 값을 업데이트\r\n        }),\r\n        [WRITE_POST]: state => ({\r\n            ...state,\r\n            // post와 postError를 초기화\r\n            post: null,\r\n            postError: null\r\n        }),\r\n        // 포스트 작성 성공\r\n        [WRITE_POST_SUCCESS]: (state, {payload: post}) => ({\r\n            ...state,\r\n            post\r\n        }),\r\n        // 포스트 작성 실패\r\n        [WRITE_POST_FAILURE]: (state, {payload: postError}) => ({\r\n            ...state,\r\n            postError\r\n        }),\r\n        [SET_ORIGINAL_POST]: (state, {payload: post}) => ({\r\n            ...state,\r\n            title: post.title,\r\n            body: post.body,\r\n            tags: post.tags,\r\n            originalPostId: post._id\r\n        }),\r\n        [UPDATE_POST_SUCCESS]: (state, {payload: post}) => ({\r\n            ...state,\r\n            post\r\n        }),\r\n        [UPDATE_POST_FAILURE]: (state, {payload: postError}) => ({\r\n            ...state,\r\n            postError\r\n        })\r\n    },\r\n    initialState\r\n);\r\n\r\nexport default write;","import React, {useEffect, useCallback} from 'react';\r\nimport Editor from '../../components/write/Editor';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {changeField, initialize} from '../../modules/write';\r\n\r\nconst EditorContainer = () => {\r\n    const dispatch = useDispatch();\r\n    const {title, body} = useSelector(({write}) => ({\r\n        title: write.title,\r\n        body: write.body\r\n    }));\r\n    const onChangeField = useCallback(payload => dispatch(changeField(payload)), [\r\n        dispatch\r\n    ]);\r\n    // 언마운트될 때 초기화\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(initialize());\r\n        };\r\n    }, [dispatch]);\r\n\r\n    return <Editor onChangeField={onChangeField} title={title} body={body}/>;\r\n};\r\n\r\nexport default EditorContainer;","import React, {useState, useCallback, useEffect} from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\n\r\n\r\nconst TagBoxBlock = styled.div`\r\n  width: 100%;\r\n  border-top: 1px solid ${palette.gray[2]};\r\n  padding-top: 2rem;\r\n  \r\n  h4 {\r\n    color: ${palette.gray[8]};\r\n    margin-top: 0;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst TagForm = styled.form`\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n  display: flex;\r\n  width: 256px;\r\n  border: 1px solid ${palette.gray[9]}; // 스타일 초기화\r\n  input, button {\r\n    outline: none;\r\n    border: none;\r\n    font-size: 1rem;\r\n  }\r\n  \r\n  input {\r\n    padding: 0.5rem;\r\n    flex: 1;\r\n    min-width: 0;\r\n  }\r\n  \r\n  button {\r\n    cursor: pointer;\r\n    padding-right: 1rem;\r\n    padding-left: 1rem;\r\n    border: none;\r\n    background: ${palette.gray[8]};\r\n    color: #fff;\r\n    font-weight: bold;\r\n    &:hover {\r\n      background: ${palette.gray[6]};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Tag = styled.div`\r\n  margin-right: 0.5rem;\r\n  color: ${palette.gray[6]};\r\n  cursor: pointer;\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`;\r\n\r\nconst TagListBlock = styled.div`\r\n  display: flex;\r\n  margin-top: 0.5rem;\r\n`;\r\n\r\n// React.memo를 사용하여 tag 값이 바뀔 때만 리렌더링되도록 처리\r\nconst TagItem = React.memo(({tag, onRemove}) => (\r\n    <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>\r\n));\r\n\r\n// React.memo를 사용하여 tags 값이 바뀔 때만 리렌더링되도록 처리\r\nconst TagList = React.memo(({tags, onRemove}) => (\r\n    <TagListBlock>\r\n        {tags.map(tag => (\r\n            <TagItem key={tag} tag={tag} onRemove={onRemove}/>\r\n        ))}\r\n    </TagListBlock>\r\n));\r\n\r\nconst TagBox = ({tags, onChangeTags}) => {\r\n    const [input, setInput] = useState('');\r\n    const [localTags, setLocalTags] = useState([]);\r\n\r\n    const insetTag = useCallback(\r\n        tag => {\r\n            if (!tag) return; // 공백이면 추가하지 않음\r\n            if (localTags.includes(tag)) return; // 이미 존재하면 추가하지 않음\r\n            const nextTags = [...localTags, tag];\r\n            setLocalTags([...localTags, tag]);\r\n            onChangeTags(nextTags);\r\n        }, [localTags, onChangeTags]\r\n    );\r\n\r\n    const onRemove = useCallback(\r\n        tag => {\r\n            const nextTags = setLocalTags(localTags.filter(t => t !== tag));\r\n            setLocalTags(nextTags);\r\n            onChangeTags(nextTags);\r\n        }, [localTags, onChangeTags]\r\n    );\r\n\r\n    const onChange = useCallback(e => {\r\n        setInput(e.target.value);\r\n    }, []);\r\n\r\n    const onSubmit = useCallback(\r\n        e => {\r\n            e.preventDefault();\r\n            insetTag(input.trim()); // 앞뒤 공백을 없앤 후 등록\r\n            setInput(''); // input 초기화\r\n        }, [input, insetTag]\r\n    );\r\n\r\n    // tags 값이 바뀔 때\r\n    useEffect(() => {\r\n        setLocalTags(tags);\r\n    }, [tags]);\r\n\r\n    return (\r\n        <TagBoxBlock>\r\n            <h4>태그</h4>\r\n            <TagForm onSubmit={onSubmit}>\r\n                <input\r\n                    placeholder=\"태그를 입력하세요\"\r\n                    value={input}\r\n                    onChange={onChange}\r\n                />\r\n                <button type=\"submit\">추가</button>\r\n            </TagForm>\r\n            <TagList tags={localTags} onRemove={onRemove}/>\r\n        </TagBoxBlock>\r\n    );\r\n};\r\n\r\nexport default TagBox;","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport TagBox from '../../components/write/TagBox';\r\nimport {changeField} from '../../modules/write';\r\n\r\nconst TagBoxContainer = () => {\r\n    const dispatch = useDispatch();\r\n    const tags = useSelector(state => state.write.tags);\r\n\r\n    const onChangeTags = nextTags => {\r\n        dispatch(\r\n            changeField({\r\n                key: 'tags',\r\n                value: nextTags\r\n            })\r\n        );\r\n    };\r\n\r\n    return <TagBox onChangeTags={onChangeTags} tags={tags}/>;\r\n};\r\n\r\nexport default TagBoxContainer;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '../common/Button';\r\n\r\nconst WriteActionButtonsBlock = styled.div`\r\n  margin-top: 1rem;\r\n  margin-bottom: 3rem;\r\n  button + button {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\n// TagBox에서 사용하는 버튼과 일치하는 높이로 설정한 후 서로 간의 여백 지정\r\nconst StyledButton = styled(Button)`\r\n  height: 2.125rem;\r\n  & + & {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst WriteActionButtons = ({onCancel, onPublish, isEdit}) => {\r\n    return (\r\n        <WriteActionButtonsBlock>\r\n            <StyledButton cyan onClick={onPublish}>\r\n                포스트 {isEdit ? '수정' : '등록'}\r\n            </StyledButton>\r\n            <StyledButton onClick={onCancel}>취소</StyledButton>\r\n        </WriteActionButtonsBlock>\r\n    );\r\n};\r\n\r\nexport default WriteActionButtons;","import React, {useEffect} from 'react';\r\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {writePost, updatePost} from '../../modules/write';\r\n\r\nconst WriteActionButtonsContainer = ({history}) => {\r\n    const dispatch = useDispatch();\r\n    const {title, body, tags, post, postError, originalPostId} = useSelector(({write}) => ({\r\n        title: write.title,\r\n        body: write.body,\r\n        tags: write.tags,\r\n        post: write.post,\r\n        postError: write.postError,\r\n        originalPostId: write.originalPostId\r\n    }));\r\n\r\n    // 포스트 등록\r\n    const onPublish = () => {\r\n        if (originalPostId) {\r\n            dispatch(updatePost({title, body, tags, id: originalPostId}));\r\n            return;\r\n        }\r\n        dispatch(\r\n            writePost({\r\n                title,\r\n                body,\r\n                tags\r\n            })\r\n        );\r\n    };\r\n\r\n    // 취소\r\n    const onCancel = () => {\r\n        history.goBack();\r\n    };\r\n\r\n    // 성공 혹은 실패 시 작업\r\n    useEffect(() => {\r\n        if (post) {\r\n            const {_id, user} = post;\r\n            history.push(`/@${user.username}/${_id}`);\r\n        }\r\n        if (postError) {\r\n            console.log(postError);\r\n        }\r\n    }, [history, post, postError]);\r\n\r\n    return (\r\n        <WriteActionButtons\r\n            onPublish={onPublish}\r\n            onCancel={onCancel}\r\n            isEdit={!!originalPostId}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(WriteActionButtonsContainer);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Responsive from './Responsive';\r\nimport Button from './Button';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst HeaderBlock = styled.div`\r\n  position: fixed;\r\n  width: 100%;\r\n  background: #fff;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);\r\n`;\r\n\r\n// Responsive 컴포넌트의 속성에 스타일을 추가해 새로운 컴포넌트 생성\r\nconst Wrapper = styled(Responsive)`\r\n  height: 4rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between; // 자식 엘리먼트 사이 여백을 최대로 설정\r\n  .logo {\r\n    font-size: 1.125rem;\r\n    font-weight: 800;\r\n    letter-spacing: 2px;\r\n  }\r\n  .right {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\n// 헤더가 fixed 로 되어 있기 때문에 페이지의 콘텐츠가 4rem 아래에 나타나도록 해주는 컴포넌트\r\nconst Spacer = styled.div`\r\n  height: 4rem;\r\n`;\r\n\r\nconst UserInfo = styled.div`\r\n  font-weight: 800;\r\n  margin-right: 1rem;\r\n`;\r\n\r\nconst Header = ({user, onLogout}) => {\r\n    return (\r\n        <>\r\n            <HeaderBlock>\r\n                <Wrapper>\r\n                    <Link to=\"/\" className=\"logo\">\r\n                        U-Zo\r\n                    </Link>\r\n                    {user ? (\r\n                        <div className=\"right\">\r\n                            <UserInfo>{user.username}</UserInfo>\r\n                            <Button onClick={onLogout}>로그아웃</Button>\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"right\">\r\n                            <Button to=\"/login\">로그인</Button>\r\n                        </div>\r\n                    )}\r\n                </Wrapper>\r\n            </HeaderBlock>\r\n            <Spacer/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport Header from '../../components/common/Header';\r\nimport {logout} from '../../modules/user';\r\n\r\nconst HeaderContainer = () => {\r\n    const {user} = useSelector(({user}) => ({user: user.user}));\r\n    const dispatch = useDispatch();\r\n    const onLogout = () => {\r\n        dispatch(logout());\r\n    };\r\n    return <Header user={user} onLogout={onLogout}/>;\r\n};\r\n\r\nexport default HeaderContainer;","import React from 'react';\r\nimport Responsive from '../components/common/Responsive';\r\nimport EditorContainer from '../containers/write/EditorContainer';\r\nimport TagBoxContainer from '../containers/write/TagBoxContainer';\r\nimport WriteActionButtonsContainer from '../containers/write/WriteActionButtonsContainer';\r\nimport HeaderContainer from '../containers/common/HeaderContainer';\r\n\r\nconst WritePage = () => {\r\n    return (\r\n        <>\r\n            <HeaderContainer/>\r\n            <Responsive>\r\n                <EditorContainer/>\r\n                <TagBoxContainer/>\r\n                <WriteActionButtonsContainer/>\r\n            </Responsive>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default WritePage;","import {createAction, handleActions} from 'redux-actions';\r\nimport createRequestSaga, {createRequestActionTypes} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport {takeLatest} from 'redux-saga/effects';\r\n\r\nconst [\r\n    READ_POST,\r\n    READ_POST_SUCCESS,\r\n    READ_POST_FAILURE\r\n] = createRequestActionTypes('post/READ_POST');\r\nconst UNLOAD_POST = 'post/UNLOAD_POST'; // 포스트 페이지에서 벗어날 때 데이터 비우기\r\n\r\nexport const readPost = createAction(READ_POST, id => id);\r\nexport const unloadPost = createAction(UNLOAD_POST);\r\n\r\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\r\nexport function* postSaga() {\r\n    yield takeLatest(READ_POST, readPostSaga);\r\n}\r\n\r\nconst initialState = {\r\n    post: null,\r\n    error: null\r\n};\r\n\r\nconst post = handleActions(\r\n    {\r\n        [READ_POST_SUCCESS]: (state, {payload: post}) => ({\r\n            ...state,\r\n            post\r\n        }),\r\n        [READ_POST_FAILURE]: (state, {payload: error}) => ({\r\n            ...state,\r\n            error\r\n        }),\r\n        [UNLOAD_POST]: () => initialState\r\n    },\r\n    initialState\r\n);\r\n\r\nexport default post;","import React from 'react';\r\nimport styled, {css} from 'styled-components';\r\nimport {Link} from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst SubInfoBlock = styled.div`\r\n  ${props =>\r\n    props.hasMarginTop &&\r\n    css`\r\n      margin-top: 1rem;\r\n    `};\r\n  color: ${palette.gray[6]};\r\n  \r\n  span + span:before {\r\n    color: ${palette.gray[4]};\r\n    padding-left: 0.25rem;\r\n    padding-right: 0.25rem;\r\n    content: ''; // 가웃뎃 점 문자\r\n  }\r\n`;\r\n\r\nconst SubInfo = ({username, publishedDate, hasMarginTop}) => {\r\n  return (\r\n      <SubInfoBlock hasMarginTop={hasMarginTop}>\r\n        <span>\r\n          <b>\r\n            <Link to={`/@${username}`}>{username}</Link>\r\n          </b>\r\n        </span>\r\n        <span>{new Date(publishedDate).toLocaleDateString()}</span>\r\n      </SubInfoBlock>\r\n  );\r\n};\r\n\r\nexport default SubInfo;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst TagsBlock = styled.div`\r\n  margin-top: 0.5rem;\r\n  .tag {\r\n    display: inline-block;\r\n    color: ${palette.cyan[7]};\r\n    text-decoration: none;\r\n    margin-right: 0.5rem;\r\n    &:hover {\r\n      color: ${palette.cyan[6]};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Tags = ({tags}) => {\r\n    return (\r\n        <TagsBlock>\r\n            {tags.map(tag => (\r\n                <Link className=\"tag\" to={`/?tag=${tag}`} key={tag}>\r\n                    #{tag}\r\n                </Link>\r\n            ))}\r\n        </TagsBlock>\r\n    );\r\n};\r\n\r\nexport default Tags;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Responsive from '../common/Responsive';\r\nimport SubInfo from '../common/SubInfo';\r\nimport Tags from '../common/Tags';\r\n\r\nconst PostViewerBlock = styled(Responsive)`\r\n  margin-top: 4rem;\r\n`;\r\n\r\nconst PostHead = styled.div`\r\n  border-bottom: 1px solid ${palette.gray[2]};\r\n  padding-bottom: 3rem;\r\n  margin-bottom: 3rem;\r\n  h1 {\r\n    font-size: 3rem;\r\n    line-height: 1.5;\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst PostContent = styled.div`\r\n  font-size: 1.3125rem;\r\n  color: ${palette.gray[8]};\r\n`;\r\n\r\nconst PostViewer = ({post, error, loading, actionButtons}) => {\r\n    if (error) {\r\n        if (error.response && error.response.data === 404) {\r\n            return <PostViewerBlock>존재하지 않는 포스트입니다.</PostViewerBlock>\r\n        }\r\n        return <PostViewerBlock>오류 발생!</PostViewerBlock>;\r\n    }\r\n\r\n    if (loading || !post) {\r\n        return null;\r\n    }\r\n\r\n    const {title, body, user, publishedDate, tags} = post;\r\n    return (\r\n        <PostViewerBlock>\r\n            <PostHead>\r\n                <h1>{title}</h1>\r\n                <SubInfo\r\n                    username={user.username}\r\n                    publishedDate={publishedDate}\r\n                    hasMarginTop\r\n                />\r\n                <Tags tags={tags}/>\r\n            </PostHead>\r\n            {actionButtons}\r\n            <PostContent\r\n                dangerouslySetInnerHTML={{__html: body}} // 태그 적용을 위한 요소 사용\r\n            />\r\n        </PostViewerBlock>\r\n    );\r\n};\r\n\r\nexport default PostViewer;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from './Button';\r\n\r\nconst Fullscreen = styled.div`\r\n  position: fixed;\r\n  z-index: 30;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.25);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst AskModalBlock = styled.div`\r\n  width: 320px;\r\n  background: #fff;\r\n  padding: 1.5rem;\r\n  border-radius: 4px;\r\n  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\r\n  \r\n  h2 {\r\n    margin-top: 0;\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  p {\r\n    margin-bottom: 3rem;\r\n  }\r\n  \r\n  .buttons {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  height: 2rem;\r\n  \r\n  & + & {\r\n    margin-left: 0.75rem;\r\n  }\r\n`;\r\n\r\nconst AskModal = ({\r\n    visible,\r\n    title,\r\n    description,\r\n    confirmText = '확인',\r\n    cancelText = '취소',\r\n    onConfirm,\r\n    onCancel\r\n}) => {\r\n    if (!visible) return null;\r\n\r\n    return (\r\n        <Fullscreen>\r\n            <AskModalBlock>\r\n                <h2>{title}</h2>\r\n                <p>{description}</p>\r\n                <div className=\"buttons\">\r\n                    <StyledButton onClick={onCancel}>{cancelText}</StyledButton>\r\n                    <StyledButton cyan onClick={onConfirm}>\r\n                        {confirmText}\r\n                    </StyledButton>\r\n                </div>\r\n            </AskModalBlock>\r\n        </Fullscreen>\r\n    );\r\n};\r\n\r\nexport default AskModal;","import React from 'react';\r\nimport AskModal from '../common/AskModal';\r\n\r\nconst AskRemoveModal = ({visible, onConfirm, onCancel}) => {\r\n    return (\r\n        <AskModal\r\n            visible={visible}\r\n            title=\"포스트 삭제\"\r\n            description=\"포스트를 정말 삭제하시겠습니까?\"\r\n            confirmText=\"삭제\"\r\n            onConfirm={onConfirm}\r\n            onCancel={onCancel}\r\n        />\r\n    );\r\n};\r\n\r\nexport default AskRemoveModal;","import React, {useState} from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport AskRemoveModal from './AskRemoveModal';\r\n\r\nconst PostActionButtonsBlock = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 2rem;\r\n  margin-top: -1.5rem;\r\n`;\r\n\r\nconst ActionButton = styled.div`\r\n  padding: 0.25rem 0.5rem;\r\n  border-radius: 4px;\r\n  color: ${palette.gray[6]};\r\n  font-weight: bold;\r\n  border: none;\r\n  outline: none;\r\n  font-size: 0.875rem;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background: ${palette.gray[1]};\r\n    color: ${palette.cyan[7]};\r\n  }\r\n  & + & {\r\n    margin-left: 0.25rem;\r\n  }\r\n`;\r\n\r\nconst PostActionButtons = ({onEdit, onRemove}) => {\r\n    const [modal, setModal] = useState(false);\r\n    const onRemoveClick = () => {\r\n        setModal(true);\r\n    };\r\n    const onCancel = () => {\r\n        setModal(false);\r\n    };\r\n    const onConfirm = () => {\r\n        setModal(false);\r\n        onRemove();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <PostActionButtonsBlock>\r\n                <ActionButton onClick={onEdit}>수정</ActionButton>\r\n                <ActionButton onClick={onRemoveClick}>삭제</ActionButton>\r\n            </PostActionButtonsBlock>\r\n            <AskRemoveModal\r\n                visible={modal}\r\n                onConfirm={onConfirm}\r\n                onCancel={onCancel}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PostActionButtons;","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {readPost, unloadPost} from '../../modules/post';\r\nimport PostViewer from '../../components/post/PostViewer';\r\nimport PostActionButtons from '../../components/post/PostActionButtons';\r\nimport {setOriginalPost} from '../../modules/write';\r\nimport {removePost} from '../../lib/api/posts';\r\n\r\nconst PostViewerContainer = ({match, history}) => {\r\n    // 처음 마운트될 때 포스트 읽기 API 요청\r\n    const {postId} = match.params;\r\n    const dispatch = useDispatch();\r\n    const {post, error, loading, user} = useSelector(({post, loading, user}) => ({\r\n        post: post.post,\r\n        error: post.error,\r\n        loading: loading['post/READ_POST'],\r\n        user: user.user\r\n    }));\r\n\r\n    useEffect(() => {\r\n        dispatch(readPost(postId));\r\n        // 언마운트될 때 리덕스에서 포스트 데이터 없애기\r\n        return () => {\r\n            dispatch(unloadPost());\r\n        };\r\n    }, [dispatch, postId]);\r\n\r\n    const onEdit = () => {\r\n        dispatch(setOriginalPost(post));\r\n        history.push('/write');\r\n    };\r\n\r\n    const onRemove = async () => {\r\n        try {\r\n            await removePost(postId);\r\n            history.push('/');\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n\r\n    const ownPost = (user && user._id) === (post && post.user._id);\r\n\r\n    return (\r\n        <PostViewer\r\n            post={post}\r\n            loading={loading}\r\n            error={error}\r\n            actionButtons={ownPost && <PostActionButtons onEdit={onEdit} onRemove={onRemove}/>}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(PostViewerContainer);","import React from 'react';\r\nimport HeaderContainer from '../containers/common/HeaderContainer';\r\nimport PostViewerContainer from '../containers/post/PostViewerContainer';\r\n\r\nconst PostPage = () => {\r\n    return (\r\n        <>\r\n            <HeaderContainer/>\r\n            <PostViewerContainer/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PostPage;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Responsive from '../common/Responsive';\r\nimport Button from '../common/Button';\r\nimport palette from '../../lib/styles/palette';\r\nimport SubInfo from '../common/SubInfo';\r\nimport Tags from '../common/Tags';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst PostListBlock = styled(Responsive)`\r\n  margin-top: 3rem;\r\n`;\r\n\r\nconst WritePostButtonWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 3rem;\r\n`;\r\n\r\nconst PostItemBlock = styled.div`\r\n  padding-top: 3rem;\r\n  padding-bottom: 3rem;\r\n  &:first-child {\r\n    padding-top: 0;\r\n  }\r\n  & + & {\r\n    border-top: 1px solid ${palette.gray[2]};\r\n  }\r\n  \r\n  h2 {\r\n    font-size: 2rem;\r\n    margin-bottom: 0;\r\n    margin-top: 0;\r\n    &:hover {\r\n      color: ${palette.gray[6]};\r\n    }\r\n  }\r\n  \r\n  p {\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nconst PostItem = ({post}) => {\r\n    const {publishedDate, user, tags, title, body, _id} = post;\r\n    return (\r\n        <PostItemBlock>\r\n            <h2>\r\n                <Link to={`/@${user.username}/${_id}`}>{title}</Link>\r\n            </h2>\r\n            <SubInfo\r\n                username={user.username}\r\n                publishedDate={new Date(publishedDate)}\r\n            />\r\n            <Tags tags={tags}/>\r\n            <p dangerouslySetInnerHTML={{__html: body}}/>\r\n        </PostItemBlock>\r\n    );\r\n};\r\n\r\nconst PostList = ({posts, loading, error, showWriteButton}) => {\r\n    // 에러 발생 시\r\n    if (error) {\r\n        return <PostListBlock>에러 발생</PostListBlock>;\r\n    }\r\n\r\n    return (\r\n        <PostListBlock>\r\n            <WritePostButtonWrapper>\r\n                {showWriteButton && (\r\n                    <Button cyan to=\"/write\">\r\n                        새 글 작성하기\r\n                    </Button>\r\n                )}\r\n            </WritePostButtonWrapper>\r\n            {!loading && posts && (\r\n                // 포스트 배열이 존재할 때만 표시\r\n                <div>\r\n                    {posts.map(post => (\r\n                        <PostItem post={post} key={post._id}/>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </PostListBlock>\r\n    );\r\n};\r\n\r\nexport default PostList;","import {createAction, handleActions} from 'redux-actions';\r\nimport createRequestSaga, {createRequestActionTypes} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport {takeLatest} from 'redux-saga/effects';\r\n\r\nconst [\r\n    LIST_POSTS,\r\n    LIST_POSTS_SUCCESS,\r\n    LIST_POSTS_FAILURE\r\n] = createRequestActionTypes('posts/LIST_POSTS');\r\n\r\nexport const listPosts = createAction(\r\n    LIST_POSTS,\r\n    ({tag, username, page}) => ({tag, username, page})\r\n);\r\n\r\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\r\nexport function* postsSaga() {\r\n    yield takeLatest(LIST_POSTS, listPostsSaga);\r\n}\r\n\r\nconst initialState = {\r\n    posts: null,\r\n    error: null,\r\n    lastPage: 1\r\n};\r\n\r\nconst posts = handleActions(\r\n    {\r\n        [LIST_POSTS_SUCCESS]: (state, {payload: posts, meta: response}) => ({\r\n            ...state,\r\n            posts,\r\n            lastPage: parseInt(response.headers['last-page'], 10) // 문자열을 숫자로 변환\r\n        }),\r\n        [LIST_POSTS_FAILURE]: (state, {payload: error}) => ({\r\n            ...state,\r\n            error\r\n        })\r\n    },\r\n    initialState\r\n);\r\n\r\nexport default posts;","import React, {useEffect} from 'react';\r\nimport qs from 'qs';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport PostList from '../../components/posts/PostList';\r\nimport {listPosts} from '../../modules/posts';\r\n\r\nconst PostListContainer = ({location, match}) => {\r\n    const dispatch = useDispatch();\r\n    const {posts, error, loading, user} = useSelector(\r\n        ({posts, loading, user}) => ({\r\n            posts: posts.posts,\r\n            error: posts.error,\r\n            loading: loading['posts/LIST_POSTS'],\r\n            user: user.user\r\n        })\r\n    );\r\n    useEffect(() => {\r\n        const {username} = match.params;\r\n        const {tag, page} = qs.parse(location.search, {\r\n            ignoreQueryPrefix: true\r\n        });\r\n        dispatch(listPosts({tag, username, page}));\r\n    }, [dispatch, location.search, match.params]);\r\n\r\n    return (\r\n        <PostList\r\n            loading={loading}\r\n            error={error}\r\n            posts={posts}\r\n            showWriteButton={user}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(PostListContainer);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport qs from 'qs';\r\nimport Button from '../common/Button';\r\n\r\nconst PaginationBlock = styled.div`\r\n  width: 320px;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 3rem;\r\n`;\r\n\r\nconst PageNumber = styled.div``;\r\n\r\nconst buildLink = ({username, tag, page}) => {\r\n    const query = qs.stringify({tag, page});\r\n    return username ? `/@${username}?${query}` : `/?${query}`;\r\n};\r\n\r\nconst Pagination = ({page, lastPage, username, tag}) => {\r\n    return (\r\n        <PaginationBlock>\r\n            <Button\r\n                disabled={page === 1}\r\n                to={\r\n                    page === 1 ? undefined : buildLink({username, tag, page: page - 1})\r\n                }\r\n            >\r\n                이전\r\n            </Button>\r\n            <PageNumber>{page}</PageNumber>\r\n            <Button\r\n                disabled={page === lastPage}\r\n                to={\r\n                    page === lastPage ? undefined : buildLink({username, tag, page: page + 1})\r\n                }\r\n            >\r\n                다음\r\n            </Button>\r\n        </PaginationBlock>\r\n    );\r\n};\r\n\r\nexport default Pagination;","import React from 'react';\r\nimport Pagination from '../../components/posts/Pagination';\r\nimport {useSelector} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\nimport qs from 'qs';\r\n\r\nconst PaginationContainer = ({location, match}) => {\r\n    const {lastPage, posts, loading} = useSelector(({posts, loading}) => ({\r\n        lastPage: posts.lastPage,\r\n        posts: posts.posts,\r\n        loading: loading['posts/LIST_POSTS']\r\n    }));\r\n\r\n    // 포스트 데이터가 없거나 로딩 중이면 아무것도 보여 주지 않음\r\n    if (!posts || loading) return null;\r\n\r\n    const {username} = match.params;\r\n    // page가 없으면 1을 기본값\r\n    const {tag, page = 1} = qs.parse(location.search, {\r\n        ignoreQueryPrefix: true\r\n    });\r\n\r\n    return (\r\n        <Pagination\r\n            tag={tag}\r\n            username={username}\r\n            page={parseInt(page, 10)}\r\n            lastPage={lastPage}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(PaginationContainer);","import React from 'react';\r\nimport HeaderContainer from '../containers/common/HeaderContainer';\r\nimport PostListContainer from '../containers/posts/PostListContainer';\r\nimport PaginationContainer from '../containers/posts/PaginationContainer';\r\n\r\nconst PostListPage = () => {\r\n    return (\r\n        <>\r\n            <HeaderContainer/>\r\n            <PostListContainer/>\r\n            <PaginationContainer/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PostListPage;","import React from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport LoginPage from './pages/LoginPage';\r\nimport RegisterPage from './pages/RegisterPage';\r\nimport WritePage from './pages/WritePage';\r\nimport PostPage from './pages/PostPage';\r\nimport PostListPage from './pages/PostListPage';\r\n\r\nconst App = () => {\r\n    return (\r\n        <>\r\n            <Route component={PostListPage} path={['/@:username', '/']} exact/>\r\n            <Route component={LoginPage} path=\"/login\"/>\r\n            <Route component={RegisterPage} path=\"/register\"/>\r\n            <Route component={WritePage} path=\"/write\"/>\r\n            <Route component={PostPage} path=\"/@:username/:postId\"/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {combineReducers} from 'redux';\r\nimport {all} from 'redux-saga/effects';\r\nimport auth, {authSaga} from './auth';\r\nimport loading from './loading';\r\nimport user, {userSaga} from './user';\r\nimport write, {writeSaga} from './write';\r\nimport post, {postSaga} from './post';\r\nimport posts, {postsSaga} from './posts';\r\n\r\nconst rootReducer = combineReducers({\r\n    auth,\r\n    loading,\r\n    user,\r\n    write,\r\n    post,\r\n    posts\r\n});\r\n\r\nexport function* rootSaga() {\r\n    yield all([authSaga(), userSaga(), writeSaga(), postSaga(), postsSaga()]);\r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {applyMiddleware, createStore} from 'redux';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootReducer, {rootSaga} from './modules';\r\nimport {tempSetUser, check} from './modules/user';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(applyMiddleware(sagaMiddleware))\r\n);\r\n\r\nfunction loadUser() {\r\n    try {\r\n        const user = localStorage.getItem('user');\r\n        if (!user) return; // 로그인 상태가 아니라면 아무것도 안 함\r\n\r\n        store.dispatch(tempSetUser(user));\r\n        store.dispatch(check());\r\n    } catch (e) {\r\n        console.log('localStorage is not working');\r\n    }\r\n}\r\n\r\nsagaMiddleware.run(rootSaga);\r\nloadUser();\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}